generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  tipo_usuario  String? @default("user")
  accounts      Account[]
  sessions      Session[]
  comments      Comments[]
  eventos       Eventos[]
  portfolios    Portfolios[]
}

model VerificationToken {
  identifier String   @unique // Added @unique
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comments {
  id       String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  authorId  String
  museumId  String
  museos Museos @relation(fields: [museumId], references: [id])
  author  User @relation(fields: [authorId], references: [id])
}

model Museos{
  id String @id @default(cuid())
  name String
  image String?
  categoria String?
  type String?
  role Role?
  comments Comments[]
}

model Eventos{
  id String @id @default(cuid())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  authorId String
  author User @relation(fields: [authorId], references: [id])
}

model Portfolios{
  id String @id @default(cuid())
  name_portfolio String
  authorId String
  author User @relation(fields: [authorId], references: [id])
}

model InfoObras {
  id String @id
  name String
  description String
  image String @default(cuid())
}

enum Role {
  Deporte
  Arte
  Historia
  Galeria  
}